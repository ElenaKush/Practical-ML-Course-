geom_point(alpha = 0.5) +
facet_grid(classe ~ user_name)
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1, color = user_name)) + ## by raw_timestamp_part_1
geom_point()
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp)) + ## by cvtd_timestamp
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = user_name, color = classe)) + ## by user_name
geom_point()
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by num_window
geom_point()
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1, color = user_name)) + ## by raw_timestamp_part_1
geom_point()
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1)) + ## by raw_timestamp_part_1
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1)) + ## by raw_timestamp_part_1
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1, color = user_name)) + ## by raw_timestamp_part_1
geom_point()
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1, color = user_name)) + ## by raw_timestamp_part_1
geom_point()
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1)) + ## by raw_timestamp_part_1
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1, color = user_name)) + ## by raw_timestamp_part_1
geom_point()
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = classe, color = classe)) + ## by classe
geom_point()
ggplot(data = train_set, aes(x = X, y = num_window, color = new_window)) + ## by user_name
geom_point(size = 2, alpha = 0.5) +
facet_grid(classe ~ user_name)
classe_1 <- trunc_train_set %>%
group_by(classe) %>%
summarise(cnt = n())## %>%
ggplot(data = classe_1, aes(x = "", y = cnt, fill = classe)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0)
classe_1 <- train_set %>%
group_by(classe) %>%
summarise(cnt = n())
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_bar()
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_col()
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_bar()
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_histogram()
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_histogram()
ggplot(data = train_set, aes(x = classe)) + ##,)) fill = user_name)) +
geom_histogram()
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_bar()
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_bar(aes(y = ..count../sum(..count..)))
varImp(rf_fit)
names(trunc_train_set)
trunc_train_set <- new_train_set[, c(2, 4:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
set.seed(12345)
rf_fit <- train(classe ~ ., data = trunc_train_set, method = 'rf')
trunc_train_set <- train_set[, c(1:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)] ## subtract the factor variables (which are mostly the aggregates)
str(trunc_train_set)
plot(rf_fit)
varImp(rf_fit)
dev_pred <- predict(rf_fit, trunc_dev_set[, -59])
trunc_dev_set$predRight <- dev_pred == trunc_dev_set$classe
table(dev_pred, trunc_dev_set$classe)
1 - 2/sum(diag(table(dev_pred, trunc_dev_set$classe)))
dev_pred <- predict(rf_fit, dev_set[, -c(1, 160)])
dev_set$predRight <- dev_pred == dev_set$classe
table(dev_pred, dev_set$classe)
valid_pred <- predict(rf_fit, trunc_valid_set[, -59])
trunc_valid_set$predRight <- valid_pred == trunc_valid_set$classe
table(valid_pred, trunc_valid_set$classe)
varImp(rf_fit)
?varImp
class(rf_fit)
trunc_train_set <- new_train_set[, c(2, 4:160)]
names(trunc_train_set)
p_load(caret,
dplyr,
lubridate,
reshape2,
ggplot2,
plotly,
randomForest)
library(pacman)
p_load(caret,
dplyr,
lubridate,
reshape2,
ggplot2,
plotly,
randomForestб
foreach,
p_load(caret,
dplyr,
lubridate,
reshape2,
ggplot2,
plotly,
randomForest,
foreach,
doSNOW)
registerDoSNOW(makeCluster(2, type="SOCK"))
registerDoSNOW(makeCluster(2, type="SOCK"))
rf <- foreach(ntree = rep(40, 2), .combine = combine, .packages = "randomForest") %dopar% randomForest(classe ~ .,data=trunc_train_set, ntree = ntree, importance=TRUE)
rf <- foreach(ntree = rep(40, 2), .combine = combine, .packages = "randomForest") %dopar% randomForest(classe ~ .,data=trunc_train_setб importance=TRUE)
rf <- foreach(ntree = rep(40, 2), .combine = combine, .packages = "randomForest") %dopar% randomForest(classe ~ .,data=trunc_train_set, importance=TRUE)
p_load(caret,
dplyr,
lubridate,
reshape2,
ggplot2,
plotly,
ranger)
ranger(classe ~ ., data = runc_train_set)
ranger(classe ~ ., data = trunc_train_set)
trunc_train_set <- new_train_set[, c(2, 4:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)] ## to avoid a leakage, we have to exclude ##the X variable that indicates a row number and raw_timestamp_part_1 that indicates a date of exercise
rf_fit2 <- ranger(classe ~ ., data = trunc_train_set)
rf_fit2
rf_fit
plot(rf_fit2)
varImp(rf_fit2)
class(rf_fit2)
importance(rf_fit2)
rf_fit2 <- ranger(classe ~ ., data = trunc_train_set,  importance = "permutation") ##random forest
rf_fit2 <- ranger(classe ~ ., data = trunc_train_set,  importance = "permutation") ##random forest
rf_fit2
importance(rf_fit2)
importance(rf_fit2)*1000000
test_set[, -160]
test_set[c(2, 6, 7), -160]
test_set[c(2, 6, 7), -160]
test_set[, c(2, 6, 7)]
test_set[, c(2, 3, 6, 7)]
train_set[train_set$num_window==74, c(2, 6, 7, 160)]
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = raw_timestamp_part_1, color = user_name)) + ## by raw_timestamp_part_1
geom_point()
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(user_name ~ .)
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by num_window и user_name
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = num_window, color = classe)) + ## by num_window и user_name
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(user_name ~ .)
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(user_name ~ .)
ggplot(data = train_set, aes(x = X, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = num_window, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = num_window, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
##    facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = X, y = classe, color = classe)) + ## by classe
geom_point()
ggplot(data = train_set, aes(x = num_window, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8)
ggplot(data = train_set, aes(x = num_window, y = cvtd_timestamp, color = classe)) + ## by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(. ~ user_name)
ggplot(data = train_set, aes(x = num_window, y = cvtd_timestamp, color = classe)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(user_name ~ .)
ggplot(data = train_set, aes(x = num_window, y = raw_timestamp_part_1, color = classe)) + ## num_window by raw_timestamp_part_1
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(user_name ~ .)
ggplot(data = train_set, aes(x = num_window, y = cvtd_timestamp, color = classe)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8) +
facet_grid(user_name ~ .)
ggplot(data = train_set, aes(x = num_window, y = user_name, color = classe)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8)
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = 0.8)
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = count(user_name))
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = n(user_name))
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = n())
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ## num_window by cvtd_timestamp
geom_point(alpha = 0.5, size = count())
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ##
geom_point(alpha = 0.5, size = 0.8)
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ##
geom_point(alpha = 0.2, size = 0.8)
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ##
geom_point(alpha = 0.2, size = 2)
ggplot(data = train_set, aes(x = num_window, y = classe, color = user_name)) + ##
geom_point(alpha = 0.2)
spread_df %>%
count(classe, num_window) %>%
spread(num_window, classe, fill = 0)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(num_window, classe, fill = 0)
p_load(caret,
dplyr,
tidyr,
lubridate,
reshape2,
ggplot2,
plotly,
ranger)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(num_window, classe, fill = 0)
View(spread_df)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(num_window, n, fill = 0)
View(spread_df)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0)
View(spread_df)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0) %>%
summarise(sum = sum())
View(spread_df)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0) %>%
summarise(sum = rowsum())
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0) %>%
summarise(sum = rowsum(spread_df[, -1]))
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0) %>%
summarise(sum = rowSums())
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0) %>%
summarise(sum = A+B+C+D+E)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0)
spread_df$sum <- spread_df$A + spread_df$B + spread_df$C + spread_df$D + spread_df$E
spread_df$sum <- rowSums(spread_df[, -1])
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0)
spread_df$sum <- rowSums(spread_df[, -1])
knitr::opts_chunk$set(echo = FALSE, comment = NA)
if("pacman" %in% rownames(installed.packages()) == FALSE){ install.packages("pacman") }
library(pacman)
p_load(caret,
dplyr,
tidyr,
lubridate,
reshape2,
ggplot2,
plotly,
ranger)
local_path <- "C:/Users/kushnarevaei/Documents/GitHub/JH_R_Course/Course8/Week4/project8/"
spread_df$sum <- rowSums(spread_df[, -1])
View(spread_df)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0)
spread_df$sum <- rowSums(spread_df[, -1])
View(spread_df)
View(spread_df)
if (spread_df$A != 0) {
spread_df$dif <- spread_df$A - spread_df$sum
} else if (spread_df$B != 0) {
spread_df$dif <- spread_df$B - spread_df$sum
} else if (spread_df$C != 0) {
spread_df$dif <- spread_df$C - spread_df$sum
} else if (spread_df$D != 0) {
spread_df$dif <- spread_df$D - spread_df$sum
} else if (spread_df$E != 0) {
spread_df$dif <- spread_df$E - spread_df$sum
} else {
spread_df$dif <- NULL
}
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0)
spread_df$sum <- rowSums(spread_df[, -1])
length(spread_df)
nrow(spread_df)
for(i in 1:nrow(spread_df)) {
if (spread_df[i, spread_df$A] != 0) {
spread_df$dif[i, ] <- spread_df[i, spread_df$A] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$B] != 0) {
spread_df$dif[i, ] <- spread_df[i, spread_df$B] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$C] != 0) {
spread_df$dif[i, ] <- spread_df[i, spread_df$C] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$D] != 0) {
spread_df$dif[i, ] <- spread_df[i, spread_df$D] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$E] != 0) {
spread_df$dif[i, ] <- spread_df[i, spread_df$E] - spread_df[i, spread_df$sum]
} else {
spread_df$dif <- NULL
}
}
View(spread_df)
for(i in 1:nrow(spread_df)) {
spread_df$dif[i] <- NULL
if (spread_df[i, spread_df$A] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$A] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$B] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$B] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$C] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$C] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$D] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$D] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$E] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$E] - spread_df[i, spread_df$sum]
} else {
spread_df$dif <- NULL
}
}
spread_df$dif[i] <- NULL
for(i in 1:nrow(spread_df)) {
spread_df$dif <- NULL
if (spread_df[i, spread_df$A] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$A] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$B] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$B] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$C] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$C] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$D] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$D] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$E] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$E] - spread_df[i, spread_df$sum]
} else {
spread_df$dif <- NULL
}
}
spread_df$dif <- NULL
View(spread_df)
spread_df$dif <- NULL
spread_df$dif <- 0
for(i in 1:nrow(spread_df)) {
if (spread_df[i, spread_df$A] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$A] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$B] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$B] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$C] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$C] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$D] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$D] - spread_df[i, spread_df$sum]
} else if (spread_df[i, spread_df$E] != 0) {
spread_df$dif[i] <- spread_df[i, spread_df$E] - spread_df[i, spread_df$sum]
} else {
spread_df$dif <- NULL
}
}
for(i in 1:nrow(spread_df)) {
if (spread_df[i, 2] != 0) {
spread_df$dif[i] <- spread_df[i, 2] - spread_df[i, 7]
} else if (spread_df[i, 3] != 0) {
spread_df$dif[i] <- spread_df[i, 3] - spread_df[i, 7]
} else if (spread_df[i, 4] != 0) {
spread_df$dif[i] <- spread_df[i, 4] - spread_df[i, 7]
} else if (spread_df[i, 5] != 0) {
spread_df$dif[i] <- spread_df[i, 5] - spread_df[i, 7]
} else if (spread_df[i, 6] != 0) {
spread_df$dif[i] <- spread_df[i, 6] - spread_df[i, 7]
} else {
spread_df$dif <- NULL
}
}
summary(spread_df$dif)
class(spread_df$dif)
summary(unlist(spread_df$dif))
View(spread_df)
spread_df <- train_set %>%
count(classe, num_window) %>%
spread(classe, n, fill = 0)
spread_df$sum <- rowSums(spread_df[, -1])
View(spread_df)
spread_df$dif <- 0
for(i in 1:nrow(spread_df)) {
if (spread_df[i, 2] != 0) {
spread_df$dif[i] <- spread_df[i, 2] - spread_df[i, 7]
} else if (spread_df[i, 3] != 0) {
spread_df$dif[i] <- spread_df$dif[i] + spread_df[i, 3] - spread_df[i, 7]
} else if (spread_df[i, 4] != 0) {
spread_df$dif[i] <- spread_df$dif[i] + spread_df[i, 4] - spread_df[i, 7]
} else if (spread_df[i, 5] != 0) {
spread_df$dif[i] <- spread_df$dif[i] + spread_df[i, 5] - spread_df[i, 7]
} else if (spread_df[i, 6] != 0) {
spread_df$dif[i] <- spread_df$dif[i] + spread_df[i, 6] - spread_df[i, 7]
} else {
spread_df$dif <- NULL
}
}
summary(unlist(spread_df$dif))
ggplot(data = train_set, aes(x = classe, fill = user_name)) +
geom_bar(aes(y = ..count../sum(..count..)))
trunc_train_set <- train_set[, c(1:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)] ## subtract the factor variables (which are mostly the aggregates)
str(trunc_train_set)
cor_train <- cor(trunc_train_set[, sapply(trunc_train_set, is.numeric)], use = "complete.obs")
melted_cor_train <- melt(cor_train)
ggplot(data = melted_cor_train, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white")
head(cor_train)
dim(cor_train)
cor_train[, ncol(cor_train)]
dim(cor_train[, ncol(cor_train)])
cor_train[, ncol(cor_train)]
class(cor_train[, ncol(cor_train)])
cor_train[, ncol(cor_train)] %>%
filter( > 0.7)
as.table <- cor_train[, ncol(cor_train)] %>%
filter( > 0.7)
as.table(cor_train[, ncol(cor_train)])
as.data.frame(cor_train[, ncol(cor_train)]) %>%
filter( > 0.7)
as.data.frame(cor_train[, ncol(cor_train)])
dim(as.data.frame(cor_train[, ncol(cor_train)]))
dim(as.data.frame(cor_train[, value = ncol(cor_train)]))
filter(value > 0.7 OR value < 0.7)
as.data.frame(cor_train[, value = ncol(cor_train)])
filter(value > 0.7 OR value < -0.7)
filter(value > 0.7, value < -0.7)
filter(ncol(cor_train) > 0.7, ncol(cor_train) < -0.7)
as.data.frame(cor_train[, ncol(cor_train)]) %>%
filter(ncol(cor_train) > 0.7, ncol(cor_train) < -0.7)
as.data.frame(cor_train[, ncol(cor_train)])
as.data.frame(value = cor_train[, ncol(cor_train)])
as.data.frame(cor_train[, ncol(cor_train)]) %>%
filter(cor_train[, ncol(cor_train)] > 0.7, cor_train[, ncol(cor_train)] < -0.7)
a <- as.data.frame(cor_train[, ncol(cor_train)])
a
a %>%
mutate(value = cor_train[, ncol(cor_train)])%>%
filter(value > 0.7, value < -0.7)
a %>%
mutate(value = cor_train[, ncol(cor_train)])%>%
filter(value > 0.7)
a %>%
filter(cor_train[, ncol(cor_train)] > 0.7)
sort(as.data.frame(cor_train[, ncol(cor_train)]))
sort(as.data.frame(cor_train[, ncol(cor_train)])[,1])
sort(cor_train[, ncol(cor_train)])
sort(as.data.frame(cor_train[, ncol(cor_train)+1])[,1])
trunc_train_set <- train_set[, c(1:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)] ## subtract the factor variables (which are mostly the aggregates)
str(trunc_train_set)
dim(trunc_train_set)
dim(cor_train)
names(cor_train)
sort(cor_train[, 56])
sort(cor_train[56, ])
cor_train[56, ]
?cor
melted_cor_train
melted_cor_train %>%
filter(Var1 == 'classe')
tail(melted_cor_train)
knitr::opts_chunk$set(echo = TRUE, comment = NA)
if("pacman" %in% rownames(installed.packages()) == FALSE){ install.packages("pacman") }
library(pacman)
p_load(caret,
dplyr,
tidyr,
lubridate,
reshape2,
ggplot2,
plotly,
ranger,
e1071)
trainIndex <- createDataPartition(train_set$classe, p = .8, list = FALSE)
set.seed(12345)
trainIndex <- createDataPartition(train_set$classe, p = .8, list = FALSE)
new_train_set <- train_set[trainIndex, ]
devIndex <- createDataPartition(train_set[-trainIndex, 160], p = .5, list = FALSE)
dev_set <- train_set[-trainIndex, ][devIndex,]
valid_set <- train_set[-trainIndex, ][-devIndex,]
trunc_train_set <- new_train_set[, c(2, 4:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)] ## to avoid a leakage, we have to exclude ##the X variable that indicates a row number and raw_timestamp_part_1 that indicates a date of exercise
trunc_dev_set <- dev_set[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
trunc_valid_set <- valid_set[, c(2:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
set.seed(12345)
rf_fit2 <- ranger(classe ~ ., data = trunc_train_set,  importance = "permutation") ##random forest
rf_fit1 <- train(classe ~ ., data = trunc_train_set, method = 'ranger')
